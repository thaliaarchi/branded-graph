var searchIndex = JSON.parse('{\
"branded_graph":{"doc":"A branded graph type.","t":"NDDEDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Add","BrandedGraph","Graph","Node","NodeRef","Number","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","cmp","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_index","hash","hash","index","index","index_mut","into","into","into","into","iter","iter_entries","iter_entries_mut","iter_mut","iter_refs","len","new","partial_cmp","push","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unlock","unlock_mut"],"q":[[0,"branded_graph"]],"d":["","An opaque, owned graph structure, that must be unlocked to …","A branded graph structure with safe and fast …","A node in the graph with lifetime <code>&#39;id</code>.","A reference to a node in the graph with lifetime <code>&#39;id</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a branded reference to the node at the given index.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Push a node and return a reference to it, branded to this …","","","","","","","","","","","","","","","","","","Obtain a reference to the inner <code>&amp;Graph&lt;&#39;id&gt;</code>.","Obtain a reference to the inner <code>&amp;mut Graph&lt;&#39;id&gt;</code>."],"i":[3,0,0,0,0,3,1,6,2,3,1,6,2,3,1,2,3,1,1,2,3,2,1,6,2,3,1,6,2,3,1,6,2,2,3,3,1,6,2,3,6,2,3,6,2,6,1,6,2,3,6,6,6,6,6,6,1,2,6,1,2,3,2,3,1,6,2,3,1,6,2,3,1,6,2,3,1,1],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[1,1]],[[]],[[]],[[]],[[2,2],4],[[1,1],5],[[6,6],5],[[2,2],5],[[3,3],5],[[],5],[[],5],[[],5],[[],5],[[1,7],8],[[6,7],8],[[2,7],8],[[2,7],8],[[3,7],8],[[3,7],8],[[]],[[]],[[]],[[]],[[6,9],[[10,[2]]]],[[2,11]],[[3,11]],[[6,2],3],[2,9],[[6,2],3],[[]],[[]],[[]],[[]],[6,12],[6,12],[6,12],[6,12],[6,12],[6,9],[[],1],[[2,2],[[10,[4]]]],[[6,3],2],[[]],[[]],[[]],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[1,16]],[[1,16]]],"c":[],"p":[[3,"BrandedGraph"],[3,"NodeRef"],[4,"Node"],[4,"Ordering"],[15,"bool"],[3,"Graph"],[3,"Formatter"],[6,"Result"],[15,"usize"],[4,"Option"],[8,"Hasher"],[8,"Iterator"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"FnOnce"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
